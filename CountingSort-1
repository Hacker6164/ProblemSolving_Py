**Q**-->Comparison Sorting
Quicksort usually has a running time of , but is there an algorithm that can sort even faster? In general, this is not possible.
Most sorting algorithms are comparison sorts, i.e. they sort a list just by comparing the elements to one another.
A comparison sort algorithm cannot beat  (worst-case) running time, since  represents the minimum number of comparisons needed to
know where to place each element. For more details, you can see these notes (PDF).

#Code

def countingSort(arr):
    # Write your code here
    count=[0] *100
    for i in arr:
        count[i] += 1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
